<?xml version="1.0"?>
<launch>
	
  <!-- START OF ARGUMENTS -->
	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <!-- Planning ROSPlan arguments -->
    <arg name="domain_path" default="$(find assignment2_exprob)/pddl/domain_assig2.pddl" />
    <arg name="problem_path" default="$(find assignment2_exprob)/pddl/problem_assign2.pddl" />

    <arg name="knowledge_base"   default="rosplan_knowledge_base" />
    <arg name="problem_topic"    default="problem_instance" />
    <arg name="planning_language" default="PDDL" /> <!-- Can be RDDL, PPDDL or PDDL -->

  <!-- END OF ARGUMENTS -->

<!-- IMPORTANT NOTE: THE ORDER OF THE NODES AND LAUNCHES MATTERS
(WHY? I HAVE NO CLUE)-->

  <!-- ROSPLan Knowledge Base -->
  <node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
    <param name="domain_path" value="$(arg domain_path)" />
    <param name="problem_path" value="$(arg problem_path)" />
    <!-- conditional planning flags -->
    <param name="use_unknowns" value="false" />
  </node>

  <!-- ROSPlan Problem Interface - problem generation-->
  <node name="rosplan_problem_interface" pkg="rosplan_planning_system" type="problemInterface" respawn="false" output="screen">
    <param name="knowledge_base" value="$(arg knowledge_base)" />
    <param name="domain_path"    value="$(arg domain_path)" />
    <param name="problem_path"   value="$(find rosplan_planning_system)/common/generatedProblem_assignment2.pddl" />
    <param name="problem_topic"  value="$(arg problem_topic)" />
    <param name="planning_language"  value="$(arg planning_language)" />
  </node>

  <!-- ROSPLan Planner Interface - plan generation-->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"	value="true" />
    <arg name="problem_topic"	value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"	value="planner_output" />
    <arg name="domain_path" value="$(arg domain_path)" />
    <arg name="data_path"	value="$(find assignment2_exprob)/pddl" />
    <arg name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
  </include>

  <!-- ROSPlan Parsing Interface - plan Parsing -->
  <node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false" output="screen">
    <param name="knowledge_base" value="rosplan_knowledge_base" />
    <param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
    <param name="plan_topic"	value="complete_plan" />
  </node>

  <!-- ROSPlan Plan Dispatcher - plan execution -->
  <node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false" output="screen">
    <param name="knowledge_base" value="rosplan_knowledge_base" />
    <param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
    <param name="action_dispatch_topic" value="action_dispatch" />
    <param name="action_feedback_topic" value="action_feedback" />
  </node>


  <!-- Actions Execution: -->
    <!-- Simulated Actions -->
    <!-- ?????????????????????????????????????????????????????????????????? -->
    <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
      <arg name="pddl_action_name" value="undock" />
    </include>
    <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
      <arg name="pddl_action_name" value="dock" />
    </include>
    <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
      <arg name="pddl_action_name" value="localise" />
    </include>
    <!-- ?????????????????????????????????????????????????????????????????? -->
    
    
    
    <!-- Real Actions -->
    <!-- reach_waypoint cpp file -->
    <node name="reach_waypoint" pkg="RP_interface" type="reach_waypoint" respawn="false" output="screen"/>
      <param name="knowledge_base" value="rosplan_knowledge_base" />
      <param name="pddl_action_name" value="reachwp" />
      <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
      <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>
    
    
    
    
    
    <!-- go_marker cpp file -->
    <node name="go_marker" pkg="RP_interface" type="go_marker" respawn="false" output="screen"/>
      <param name="knowledge_base" value="rosplan_knowledge_base" />
      <param name="pddl_action_name" value="detect_marker" />
      <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
      <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>
    
    
    
    
    
    <!-- go_back_init cpp file -->
    <node name="go_back_init" pkg="RP_interface" type="go_back_init" respawn="false" output="screen"/>
      <param name="knowledge_base" value="rosplan_knowledge_base" />
      <param name="pddl_action_name" value="goback" />
      <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
      <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>

    
</launch>
